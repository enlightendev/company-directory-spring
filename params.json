{"name":"Company-directory-spring","tagline":"","body":"# Company Directory #\r\n\r\nThis application serves as a central hub to easily retrieve employee data, e.g. \r\nphone numbers, roles, support info, etc. It will also serve as the foundation for automating\r\nany on boarding and off boarding processes.\r\n\r\n\r\n## Prerequisites ##\r\n\r\n- Spring Boot (created with dependency specified in pom.xml) - http://projects.spring.io/spring-boot/\r\n- Maven 3.2.2 - http://maven.apache.org/download.cgi\r\n- JDK 1.7\r\n- MySQL 5 or greater - http://dev.mysql.com/downloads/\r\n\r\nThis app is a Spring Boot application and thus leaves much of the configuration to the framework. \r\nDependencies and builds are managed via maven and thus maven is necessary\r\n   \r\n## Build Instructions ##\r\n\r\nThis project requires Maven 3 to build. \r\n\r\nGet started:\r\n\r\n    clone the repo: git clone https://github.com/jlamadrid/company-directory-spring\r\n    cd company-directory-spring  \r\n    maven clean compile\r\n\r\n### Database\r\n- The application.properties file contains the database connection info.\r\n- The application currently uses mysql and thus a schema and user defined in application.properties must be created.\r\n- Upon restart the following files are executed to create test data: schema.sql and data.sql\r\n\r\n### Security\r\n\r\n- You can configure security in WebSecurityConfig.java\r\n- To keep things simple use the in-memory authentication provided by spring security.\r\n- To configure CROWD based security simply uncomment @ImportResource and comment out any overriding \r\n  methods in WebSecurity Config\r\n\r\n### Testing and Running the application\r\n\r\nTesting: \r\n\r\n    in your IDE or command line run 'mvn test' \r\n\r\nRunning the app:\r\n\r\n    open project in your IDE and exec Main.java\r\n    or command line: mvn spring-boot:run\r\n    open URL: http://localhost:8080/app\r\n    when prompted for username password see WebSecurityConfig for credentials\r\n\r\n## NOTES & FUTURE TODOs ##\r\n\r\nFollow this guide to access entities through a hypermedia-based RESTful front end:\r\nhttps://github.com/spring-guides/gs-accessing-data-rest\r\n\r\nNOTE: first have to figure out how ExtJS can access a ypermedia based rest api.\r\n\r\nSteps:\r\n1 - Add the following dependency to your POM\r\n\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-data-rest</artifactId>\r\n        </dependency>\r\n        \r\n2 - Add \"@Import(RepositoryRestMvcConfiguration.class)\" to the main app\r\n\r\n3 - Remove \"@Repository\" from CrudRepository and replace with \r\n    @RepositoryRestResource(collectionResourceRel = \"employee\", path = \"employee\")\r\n    \r\n4 - You can remove Rest Controllers now and access hypermedia based restful URLS.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}